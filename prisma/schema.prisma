// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// --------------------
// Enums (catálogos)
// --------------------
enum AdminRole {
  SUPERADMIN
  ADMIN
}

enum AppointmentStatus {
  PENDIENTE
  CONFIRMADA
  EN_PROCESO
  COMPLETADA
  CANCELADA
}

enum Channel {
  WHATSAPP
  WEB
  PERSONAL
}

enum Sender {
  CLIENTE
  BOT
  ADMIN
}

enum WorkOrderStatus {
  ABIERTA
  EN_PROCESO
  CERRADA
  ANULADA
}

enum ResourceType {
  BAY
  TECHNICIAN
}

// --------------------
// Roles y Usuarios (Admin)
// --------------------
model RolUser {
  id    Int    @id @default(autoincrement())
  name  String @unique // p.ej. "ADMIN", "SUPERADMIN"
  users User[]
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String   // hash
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // Relación con rol (como tu ejemplo)
  roluser    RolUser  @relation(fields: [rolId], references: [id], onDelete: Restrict)
  rolId      Int
}

// --------------------
// Clientes y Vehículos
// --------------------
model Customer {
  id         Int       @id @default(autoincrement())
  fullName   String
  phone      String    @unique
  email      String?   @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  vehicles       Vehicle[]
  appointments   Appointment[]
  messages       MessageLog[]
}

model Vehicle {
  id         Int       @id @default(autoincrement())
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int

  plate      String    @unique   // placa
  make       String?
  model      String?
  year       Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  appointments Appointment[]
}

// --------------
// Catálogo (Servicios)
// --------------
model Service {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  durationMinutes  Int
  basePrice        Decimal?  @db.Decimal(10, 2)
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  appointments     Appointment[]
}

// ----------------------
// Recursos (opcional, útil si asignas box/técnico)
// ----------------------
model Resource {
  id         Int          @id @default(autoincrement())
  name       String
  type       ResourceType
  isActive   Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  appointments Appointment[]
  @@unique([name, type])
}

// ----------------------
// Citas (Appointments)
// ----------------------
model Appointment {
  id          Int              @id @default(autoincrement())

  customer    Customer         @relation(fields: [customerId], references: [id], onDelete: Restrict)
  customerId  Int

  vehicle     Vehicle          @relation(fields: [vehicleId], references: [id], onDelete: Restrict)
  vehicleId   Int

  service     Service          @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  serviceId   Int

  // Recurso asignado (opcional: box o técnico)
  resource    Resource?        @relation(fields: [resourceId], references: [id], onDelete: SetNull)
  resourceId  Int?

  channel     Channel          @default(WHATSAPP)
  status      AppointmentStatus @default(PENDIENTE)

  startAt     DateTime
  endAt       DateTime
  notes       String?          @db.Text
  confirmationCode String      @unique

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  workOrder   WorkOrder?
  feedback    CustomerFeedback?
  messages    MessageLog[]

  // Índices útiles para consultas por rango/agenda
  @@index([startAt, endAt])
  // Evitar doble booking por recurso y horario exacto (si usas Resource)
  @@unique([resourceId, startAt], map: "uniq_resource_startAt")
}

// ----------------------
// Bitácora de Mensajes (chatbot)
// ----------------------
model MessageLog {
  id             Int         @id @default(autoincrement())
  channel        Channel
  sender         Sender
  chatExternalId String      // id de chat/telefono
  content        String      @db.Text
  meta           Json?       // payload extra (ids del proveedor, etc.)

  customer       Customer?   @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId     Int?

  appointment    Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  appointmentId  Int?

  createdAt      DateTime    @default(now())

  @@index([chatExternalId, createdAt])
}

// ----------------------
// Orden de Trabajo (ligada a la cita)
// ----------------------
model WorkOrder {
  id            Int          @id @default(autoincrement())
  appointment   Appointment  @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId Int          @unique

  items         Json?        // detalle de trabajos/insumos
  total         Decimal?     @db.Decimal(12, 2)
  status        WorkOrderStatus @default(ABIERTA)

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// ----------------------
// Feedback del Cliente (post-servicio)
// ----------------------
model CustomerFeedback {
  id            Int          @id @default(autoincrement())
  appointment   Appointment  @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId Int          @unique

  rating        Int?         // 1..5
  comment       String?      @db.Text
  createdAt     DateTime     @default(now())
}
